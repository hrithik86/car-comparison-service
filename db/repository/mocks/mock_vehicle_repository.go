// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "car-comparison-service/db/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIVehicle is a mock of IVehicle interface.
type MockIVehicle struct {
	ctrl     *gomock.Controller
	recorder *MockIVehicleMockRecorder
}

// MockIVehicleMockRecorder is the mock recorder for MockIVehicle.
type MockIVehicleMockRecorder struct {
	mock *MockIVehicle
}

// NewMockIVehicle creates a new mock instance.
func NewMockIVehicle(ctrl *gomock.Controller) *MockIVehicle {
	mock := &MockIVehicle{ctrl: ctrl}
	mock.recorder = &MockIVehicleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVehicle) EXPECT() *MockIVehicleMockRecorder {
	return m.recorder
}

// GetVehicleWithFeaturesById mocks base method.
func (m *MockIVehicle) GetVehicleWithFeaturesById(ctx context.Context, id uuid.UUID) ([]*model.VehicleWithFeatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleWithFeaturesById", ctx, id)
	ret0, _ := ret[0].([]*model.VehicleWithFeatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleWithFeaturesById indicates an expected call of GetVehicleWithFeaturesById.
func (mr *MockIVehicleMockRecorder) GetVehicleWithFeaturesById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleWithFeaturesById", reflect.TypeOf((*MockIVehicle)(nil).GetVehicleWithFeaturesById), ctx, id)
}

// GetVehiclesById mocks base method.
func (m *MockIVehicle) GetVehiclesById(ctx context.Context, id uuid.UUID) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehiclesById", ctx, id)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehiclesById indicates an expected call of GetVehiclesById.
func (mr *MockIVehicleMockRecorder) GetVehiclesById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehiclesById", reflect.TypeOf((*MockIVehicle)(nil).GetVehiclesById), ctx, id)
}

// GetVehiclesByIds mocks base method.
func (m *MockIVehicle) GetVehiclesByIds(ctx context.Context, ids []uuid.UUID) ([]*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehiclesByIds", ctx, ids)
	ret0, _ := ret[0].([]*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehiclesByIds indicates an expected call of GetVehiclesByIds.
func (mr *MockIVehicleMockRecorder) GetVehiclesByIds(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehiclesByIds", reflect.TypeOf((*MockIVehicle)(nil).GetVehiclesByIds), ctx, ids)
}

// GetVehiclesByModel mocks base method.
func (m *MockIVehicle) GetVehiclesByModel(ctx context.Context, vehicleName string) ([]*model.VehicleWithAttachmentInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehiclesByModel", ctx, vehicleName)
	ret0, _ := ret[0].([]*model.VehicleWithAttachmentInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehiclesByModel indicates an expected call of GetVehiclesByModel.
func (mr *MockIVehicleMockRecorder) GetVehiclesByModel(ctx, vehicleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehiclesByModel", reflect.TypeOf((*MockIVehicle)(nil).GetVehiclesByModel), ctx, vehicleName)
}
